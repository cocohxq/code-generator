package ${javaPackage};

import ${commonValueStack.getValue("PagedResultsResponse.classPath")!""};
import ${commonValueStack.getValue("Response.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "Query.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "VO.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "DTO.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "Service.classPath")!""};
import ${commonValueStack.getValue("AbstractController.classPath")!""};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
* ${tableMeta.table.comment!''}
* code generated by tool
*/
@RestController
@RequestMapping("/${tableMeta.tableCamelNameMin}")
public class ${javaClassName} extends AbstractController{
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private ${tableCamelNameMax}Service ${tableCamelNameMin}Service;

    @RequestMapping("/insert")
    public Response<Long> insert(${tableCamelNameMax}VO ${tableCamelNameMin}VO) {
        if (null == ${tableCamelNameMin}VO) {
            return Response.writeError("插入数据为空");
        }
        try {
            ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
            BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
            ${tableCamelNameMin}DTO.setCreatorId(getUserId());
            return ${tableCamelNameMin}Service.insert(${tableCamelNameMin}DTO);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据保存异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据保存异常");
        }
    }

    @RequestMapping("/updateById")
    public Response<Integer> updateById(${tableCamelNameMax}VO ${tableCamelNameMin}VO) {
        if (null == ${tableCamelNameMin}VO) {
            return Response.writeError("更新数据为空");
        }
        try {
            ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
            BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
            ${tableCamelNameMin}DTO.setLastModifierId(getUserId());
            return ${tableCamelNameMin}Service.updateById(${tableCamelNameMin}DTO);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @RequestMapping("/updateForEditById")
    public Response<Integer> updateForEditById(${tableCamelNameMax}VO ${tableCamelNameMin}VO) {
        if (null == ${tableCamelNameMin}VO) {
            return Response.writeError("更新数据为空");
        }
        try {
            ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
            BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
            ${tableCamelNameMin}DTO.setLastModifierId(getUserId());
            return ${tableCamelNameMin}Service.updateForEditById(${tableCamelNameMin}DTO);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }


    <#if deleteStr?exists>
    @RequestMapping("/deleteById")
    public Response<Integer> deleteById(Long id) {
        if(null == id){
            return Response.writeError("删除id为空");
        }
        try {
            ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
            ${tableCamelNameMin}DTO.setId(id);
            ${tableCamelNameMin}DTO.setLastModifierId(getUserId());
            return ${tableCamelNameMin}Service.updateById(${tableCamelNameMin}DTO);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据删除异常", e);
            return PagedResultsResponse.writeError("${tableMeta.table.comment!''}数据删除异常");
        }
    }
    <#else>
    @RequestMapping("/deleteById")
    public Response<Integer> deleteById(Long id) {
        if(null == id){
            return Response.writeError("删除id为空");
        }
        try {
            return ${tableCamelNameMin}Service.deleteById(id);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据删除异常", e);
            return PagedResultsResponse.writeError("${tableMeta.table.comment!''}数据删除异常");
        }
    }
    </#if>
    @RequestMapping("/query")
    public PagedResultsResponse<${tableCamelNameMax}VO> query(${tableCamelNameMax}Query ${tableCamelNameMin}Query) {
        if (null == ${tableCamelNameMin}Query) {
            return PagedResultsResponse.writeError("查询条件为空");
        }
        try {
            PagedResultsResponse<${tableCamelNameMax}DTO> response = userService.query(userQuery);
            if(!response.isSuccess()){
                return PagedResultsResponse.writeError(response.getMessage());
            }
            List<${tableCamelNameMax}DTO> dtoList = response.getData();
            List<${tableCamelNameMax}VO> voList = new ArrayList<>();
            for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : dtoList){
                ${tableCamelNameMax}VO ${tableCamelNameMin}VO = new ${tableCamelNameMax}VO();
                BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}VO);
                voList.add(${tableCamelNameMin}VO);
            }
            return PagedResultsResponse.writeSuccess(voList, response.getPage());
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return PagedResultsResponse.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @RequestMapping("/queryAll")
    public Response<List<${tableCamelNameMax}VO>> queryAll(${tableCamelNameMax}Query ${tableCamelNameMin}Query){
        if (null == ${tableCamelNameMin}Query) {
            return Response.writeError("查询条件为空");
        }
        try {
            Response<List<${tableCamelNameMax}DTO>> response = userService.queryAll(userQuery);
            if(!response.isSuccess()){
                return Response.writeError(response.getMessage());
            }
            List<${tableCamelNameMax}VO> voList = new ArrayList<>();
            for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : response.getData()){
                ${tableCamelNameMax}VO ${tableCamelNameMin}VO = new ${tableCamelNameMax}VO();
                BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}VO);
                voList.add(${tableCamelNameMin}VO);
            }
            return Response.writeSuccess(voList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @RequestMapping("/queryById")
    public Response<${tableCamelNameMax}VO> queryById(Long id) {
        if (id == null || id <= 0) {
            return Response.writeError("指定的查询Id无效");
        }
        try {
            Response<${tableCamelNameMax}DTO> response = userService.queryById(id);
            if(!response.isSuccess()){
                return Response.writeError(response.getMessage());
            }
            if(response.getData() == null){
                return Response.writeSuccess();
            }
            ${tableCamelNameMax}VO ${tableCamelNameMin}VO = new ${tableCamelNameMax}VO();
            BeanUtils.copyProperties(response.getData(), ${tableCamelNameMin}VO);
            return Response.writeSuccess(${tableCamelNameMin}VO);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @RequestMapping("/queryByIds")
    public Response<List<${tableCamelNameMax}VO>> queryByIds(@RequestParam("ids") List<Long> ids) {
        if (ids == null || ids.size() == 0) {
            return Response.writeError("指定的查询Id无效");
        }
        try {
            Response<List<${tableCamelNameMax}DTO>> response = userService.queryByIds(ids);
            if(!response.isSuccess()){
                return Response.writeError(response.getMessage());
            }
            List<${tableCamelNameMax}VO> voList = new ArrayList<>();
            if(null != response.getData() && response.getData().size() > 0){
                for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : response.getData()){
                    ${tableCamelNameMax}VO ${tableCamelNameMin}VO = new ${tableCamelNameMax}VO();
                    BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}VO);
                    voList.add(${tableCamelNameMin}VO);
                }
            }
            return Response.writeSuccess(voList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @PostMapping("/batchUpdateById")
    public Response<Integer> batchUpdateById(@RequestBody List<${tableCamelNameMax}VO> list) {
        if (list == null || list.size() == 0) {
            return Response.writeError("批量更新的数据为空");
        }
        try {
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>(list.size());
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}VO ${tableCamelNameMin}VO : list){
                    if(${tableCamelNameMin}VO.getId() == null){
                        return Response.writeError("入参id为空,更新异常");
                    }
                    ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                    BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
                    ${tableCamelNameMin}DTO.setLastModifierId(getUserId());
                    dtoList.add(${tableCamelNameMin}DTO);
                }
            }
            return ${tableCamelNameMin}Service.batchUpdateById(dtoList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @PostMapping("/batchUpdateForEditById")
    public Response<Integer> batchUpdateForEditById(@RequestBody List<${tableCamelNameMax}VO> list) {
        if (list == null || list.size() == 0) {
            return Response.writeError("批量更新的数据为空");
        }
        try {
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>(list.size());
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}VO ${tableCamelNameMin}VO : list){
                    if(${tableCamelNameMin}VO.getId() == null){
                        return Response.writeError("入参id为空,更新异常");
                    }
                    ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                    BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
                    ${tableCamelNameMin}DTO.setLastModifierId(getUserId());
                    dtoList.add(${tableCamelNameMin}DTO);
                }
            }
            return ${tableCamelNameMin}Service.batchUpdateForEditById(dtoList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @PostMapping("/batchInsert")
    public Response<List<Long>> batchInsert(@RequestBody List<${tableCamelNameMax}VO> list) {
        if (list == null || list.size() == 0) {
            return Response.writeError("批量新增的数据为空");
        }
        try {
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>(list.size());
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}VO ${tableCamelNameMin}VO : list){
                    ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                    BeanUtils.copyProperties(${tableCamelNameMin}VO, ${tableCamelNameMin}DTO);
                    ${tableCamelNameMin}DTO.setCreatorId(getUserId());
                    dtoList.add(${tableCamelNameMin}DTO);
                }
            }
            return ${tableCamelNameMin}Service.batchInsert(dtoList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据新增异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据新增异常");
        }
    }

    @RequestMapping("/count")
    public Response<Integer> count(${tableCamelNameMax}Query ${tableCamelNameMin}Query) {
        try {
            if (null == ${tableCamelNameMin}Query) {
                return Response.writeError("查询条件为空");
            }
            return ${tableCamelNameMin}Service.count(${tableCamelNameMin}Query);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

}

