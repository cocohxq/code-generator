package ${javaPackage};

import ${commonValueStack.getValue("PagedResult.classPath")!""};
import ${commonValueStack.getValue("PagedResultsResponse.classPath")!""};
import ${commonValueStack.getValue("Response.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "DTO.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "Query.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "Service.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "DO.classPath")!""};
import ${commonValueStack.getValue(tableCamelNameMax + "Manager.classPath")!""};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
* ${tableMeta.table.comment!''}
* code generated by tool
*/
@Service("${tableCamelNameMin}Service")
public class ${javaClassName} implements ${tableCamelNameMax}Service {

    private Logger logger = LoggerFactory.getLogger(this.getClass());
    private static final int TYPE_UPDATE = 1;
    private static final int TYPE_INSERT = 0; 

    @Autowired
    private ${tableCamelNameMax}Manager ${tableCamelNameMin}Manager;


    @Override
    public Response<Long> insert(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO) {
        String msg = validate(${tableCamelNameMin}DTO,TYPE_INSERT);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
            BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
            return Response.writeSuccess(${tableCamelNameMin}Manager.insert(${tableCamelNameMin}DO));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据保存异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据保存异常");
        }
    }

    @Override
    public Response<Integer> updateById(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO) {
        String msg = validate(${tableCamelNameMin}DTO,TYPE_UPDATE);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
            BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
            return Response.writeSuccess(${tableCamelNameMin}Manager.updateById(${tableCamelNameMin}DO));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @Override
    public Response<Integer> updateForEditById(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO) {
        String msg = validate(${tableCamelNameMin}DTO,TYPE_UPDATE);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
            BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
            return Response.writeSuccess(${tableCamelNameMin}Manager.updateForEditById(${tableCamelNameMin}DO));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @Override
    public Response<Integer> deleteById(Long id) {
        if(null == id){
            return Response.writeError("删除id为空");
        }
        try {
            return Response.writeSuccess(${tableCamelNameMin}Manager.deleteById(id));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据删除异常", e);
            return PagedResultsResponse.writeError("${tableMeta.table.comment!''}数据删除异常");
        }
    }

    @Override
    public PagedResultsResponse<${tableCamelNameMax}DTO> query(${tableCamelNameMax}Query ${tableCamelNameMin}Query) {
        if (null == ${tableCamelNameMin}Query) {
            return PagedResultsResponse.writeError("查询条件为空");
        }
        try {
            PagedResult<${tableCamelNameMax}DO> result = ${tableCamelNameMin}Manager.query(${tableCamelNameMin}Query);
            List<${tableCamelNameMax}DO> doList = result.getData();
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>();
            for(${tableCamelNameMax}DO ${tableCamelNameMin}DO : doList){
                ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                BeanUtils.copyProperties(${tableCamelNameMin}DO, ${tableCamelNameMin}DTO);
                dtoList.add(${tableCamelNameMin}DTO);
            }
            return PagedResultsResponse.writeSuccess(dtoList, result.toPagination());
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return PagedResultsResponse.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @Override
    public Response<List<${tableCamelNameMax}DTO>> queryAll(${tableCamelNameMax}Query ${tableCamelNameMin}Query){
        if (null == ${tableCamelNameMin}Query) {
            return Response.writeError("查询条件为空");
        }
        try {
            List<${tableCamelNameMax}DO> doList = ${tableCamelNameMin}Manager.queryAll(${tableCamelNameMin}Query);
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>();
            for(${tableCamelNameMax}DO ${tableCamelNameMin}DO : doList){
                ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                BeanUtils.copyProperties(${tableCamelNameMin}DO, ${tableCamelNameMin}DTO);
                dtoList.add(${tableCamelNameMin}DTO);
            }
            return Response.writeSuccess(dtoList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @Override
    public Response<${tableCamelNameMax}DTO> queryById(Long id) {
		if (id == null || id <= 0) {
			return Response.writeError("指定的查询Id无效");
		}
		try {
        	${tableCamelNameMax}DO ${tableCamelNameMin}DO = ${tableCamelNameMin}Manager.queryById(id);
            if(${tableCamelNameMin}DO == null){
                return Response.writeSuccess();
            }
			${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
			BeanUtils.copyProperties(${tableCamelNameMin}DO, ${tableCamelNameMin}DTO);
			return Response.writeSuccess(${tableCamelNameMin}DTO);
		} catch (Exception e) {
			logger.error("${tableMeta.table.comment!''}数据查询异常", e);
			return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
		}
    }

    @Override
    public Response<List<${tableCamelNameMax}DTO>> queryByIds(List<Long> ids) {
        if (ids == null || ids.size() == 0) {
            return Response.writeError("指定的查询Id无效");
        }
        try {
            List<${tableCamelNameMax}DO> doList = ${tableCamelNameMin}Manager.queryByIds(ids);
            List<${tableCamelNameMax}DTO> dtoList = new ArrayList<>();
            if(null != doList && doList.size() > 0){
                for(${tableCamelNameMax}DO ${tableCamelNameMin}DO : doList){
                    ${tableCamelNameMax}DTO ${tableCamelNameMin}DTO = new ${tableCamelNameMax}DTO();
                    BeanUtils.copyProperties(${tableCamelNameMin}DO, ${tableCamelNameMin}DTO);
                    dtoList.add(${tableCamelNameMin}DTO);
                }
            }
            return Response.writeSuccess(dtoList);
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }

    @Override
    public Response<Integer> batchUpdateById(List<${tableCamelNameMax}DTO> list) {
        String msg = validate(list,TYPE_UPDATE);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            List<${tableCamelNameMax}DO> doList = new ArrayList<>();
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : list){
                    ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
                    BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
                    doList.add(${tableCamelNameMin}DO);
                }
            }
            return Response.writeSuccess(${tableCamelNameMin}Manager.batchUpdateById(doList));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @Override
    public Response<Integer> batchUpdateForEditById(List<${tableCamelNameMax}DTO> list) {
        String msg = validate(list,TYPE_UPDATE);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            List<${tableCamelNameMax}DO> doList = new ArrayList<>();
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : list){
                    ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
                    BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
                    doList.add(${tableCamelNameMin}DO);
                }
            }
            return Response.writeSuccess(${tableCamelNameMin}Manager.batchUpdateForEditById(doList));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据更新异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据更新异常");
        }
    }

    @Override
    public Response<List<Long>> batchInsert(List<${tableCamelNameMax}DTO> list) {
        String msg = validate(list,TYPE_INSERT);
        if (null != msg) {
            return Response.writeError(msg);
        }
        try {
            List<${tableCamelNameMax}DO> doList = new ArrayList<>();
            if(null != list && list.size() > 0){
                for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : list){
                    ${tableCamelNameMax}DO ${tableCamelNameMin}DO = new ${tableCamelNameMax}DO();
                    BeanUtils.copyProperties(${tableCamelNameMin}DTO, ${tableCamelNameMin}DO);
                    doList.add(${tableCamelNameMin}DO);
                }
            }
            ${tableCamelNameMin}Manager.batchInsert(doList);
            return Response.writeSuccess(doList.stream().map(e -> e.getId()).collect(Collectors.toList()));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据新增异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据新增异常");
        }
    }

    @Override
    public Response<Integer> count(${tableCamelNameMax}Query ${tableCamelNameMin}Query) {
        try {
            if (null == ${tableCamelNameMin}Query) {
                return Response.writeError("查询条件为空");
            }
            return Response.writeSuccess(${tableCamelNameMin}Manager.count(${tableCamelNameMin}Query));
        } catch (Exception e) {
            logger.error("${tableMeta.table.comment!''}数据查询异常", e);
            return Response.writeError("${tableMeta.table.comment!''}数据查询异常");
        }
    }


    private String validate(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO,int type){
        if (null == ${tableCamelNameMin}DTO) {
            return "写入数据为空";
        }

        //update 校验id
        if(type == TYPE_UPDATE && ${tableCamelNameMin}DTO.getId() == null){
            return "id为空";
        }
    <#list commonValueStack.getFieldsWithoutExclude(tableMeta.fields,"id") as field>
    <#if !(field.column.nullable || field.column.columnDefault??)>
        if(${tableCamelNameMin}DTO.get${field.fieldCamelNameMax}() == null){
            return "${field.column.columnName}为空";
        }
    </#if>
    </#list>
        return null;
    }

    private String validate(List<${tableCamelNameMax}DTO> list,int type){
        if (list == null || list.size() == 0) {
            return "批量写数据为空";
        }
        String msg = null;
        for(${tableCamelNameMax}DTO ${tableCamelNameMin}DTO : list){
            if((msg = validate(${tableCamelNameMin}DTO,type)) != null){
                return msg;
            }
        }
        return null;
    }    
}